#!/usr/bin/env python3
"""
liftover.py is used to convert all `*.scheme.bed` primer schemes over to the new `*.primers.bed` format now generated by Primal Scheme.

This is essentially taking the old 5-column format and putting it into a 6-column one that conforms to BED standards.

The new format has the following columns:

1. chrom        (str)   - primer reference sequence
2. chromStart   (int)   - starting position of the primer in the reference sequence
3. chomEnd      (int)   - ending position of the primer in the reference sequence
4. name         (str)   - primer name
5. primerPool   (int)   - primer pool
6. strand       (str)   - primer direction

Note: column 5 in the BED spec is score, whereas here it is primerPool. However, they are both encoded as an int, allowing the scheme to conform to BED parsers.

Note: BED is a 0-based, half-open format. This means that reference sequence position counting starts at 0 and the chromEnd is not included in the primer sequence.

Assumptions: primerpool string -> int conversion just takes the final character in the primerpool string and checks it is in an int < 10 and not 0.
"""
import argparse
import sys

import pandas as pd

# set up the filenames and tags
oldFormatExt = ".scheme.bed"
newFormatExt = ".primer.bed"
leftPrimerTag = "_LEFT"
rightPrimerTag = "_RIGHT"
altPrimerTag = "_alt"


def getPrimerPoolInt(primerPool):
    poolInt = int(primerPool[len(primerPool) - 1])
    if (poolInt == 0) or (poolInt > 9):
        print("could not parse pool ID from %s" %
              (primerPool), file=sys.stderr)
        raise SystemExit(1)
    return poolInt


def getPrimerDirection(primerID):
    direction = ''
    if leftPrimerTag in primerID:
        direction = '+'
    if rightPrimerTag in primerID:
        if len(direction) != 0:
            print("multiple direction tags found in Primer ID (%s)" %
                  (primerID), file=sys.stderr)
            raise SystemExit(1)
        direction = '-'
    if len(direction) == 0:
        print("no direction tag found in Primer ID (%s)" %
              (primerID), file=sys.stderr)
        raise SystemExit(1)
    return direction


def run(args):

    # read the primer scheme into a pandas dataframe and run type, length and null checks
    primers = pd.read_csv(args.inputScheme, sep='\t', header=None,
                          names=['chrom', 'start', 'end',
                                 'primerID', 'primerPoolName'],
                          dtype={'chrom': str, 'start': int, 'end': int,
                                 'primerID': str, 'primerPoolName': str},
                          usecols=(0, 1, 2, 3, 4),
                          skiprows=0)
    if len(primers.index) < 1:
        print("primer scheme file is empty", file=sys.stderr)
        raise SystemExit(1)
    if primers.isnull().sum().sum():
        print("malformed primer scheme file", file=sys.stderr)
        raise SystemExit(1)

    # convert primer scheme pool from string to int
    primers['pool'] = primers.apply(
        lambda row: getPrimerPoolInt(row.primerPoolName), axis=1)

    # compute the direction
    primers['direction'] = primers.apply(
        lambda row: getPrimerDirection(row.primerID), axis=1)

    # write back to file
    primers[['chrom', 'start', 'end', 'primerID', 'pool', 'direction']].to_csv(
        args.outputScheme, sep='\t', header=None, index=False)


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description="liftover old ARTIC primer schemes to the new BED compliant version")
    parser.add_argument("-i", "--inputScheme",
                        help="the scheme to convert", required=True)
    parser.add_argument("-o", "--outputScheme",
                        help="where to write the converted scheme", required=True)
    args = parser.parse_args()
    if not (args.inputScheme.endswith(oldFormatExt)):
        print("input scheme must be a *%s" % oldFormatExt, file=sys.stderr)
        sys.exit(1)
    run(args)
