"""
Django settings for minotourapp project.

Generated by 'django-admin startproject' using Django 1.11.1.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import tempfile

from celery.schedules import crontab

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from minotourapp.utils import get_env_variable

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '@z+2b+7hj5w6zce6!6puz$s!&amy)j@10#qlzuh9w^p#0zwzvm'
# SECRET_KEY = os.environ.get('MT_SECRET_KEY', '@z+2b+7hj5w6zce6!6puz$s!&amy)j@10#qlzuh9w^p#0zwzvm')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG = bool(os.environ.get('MT_DJANGO_DEBUG', True))
ALLOWED_HOSTS = ['*', ]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'reads',
    'web',
    'alignment',
    'reference',
    'minikraken',
    'django_celery_beat',
    'communication',
    'assembly',
    'django_extensions',
    'devices',
    'jobs',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'minotourapp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates/')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'minotourapp.wsgi.application'

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'USER': get_env_variable("MT_DB_USER"),
        'PASSWORD': get_env_variable("MT_DB_PASS"),
        'HOST': get_env_variable("MT_DB_HOST"),
        'PORT': get_env_variable("MT_DB_PORT"),
        'NAME': get_env_variable("MT_DB_NAME"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, '../minotour_static/')

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        #'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
        'rest_framework.permissions.IsAuthenticated'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    )
}

LOGIN_URL='/login'
LOGIN_REDIRECT_URL='/web/private/index'
LOGOUT_REDIRECT_URL=LOGIN_URL

# EMAIL_BACKEND = 'django_mailgun.MailgunBackend'
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
MAILGUN_ACCESS_KEY = get_env_variable("MT_MAILGUN_ACCESS_KEY")
MAILGUN_SERVER_NAME = get_env_variable("MT_MAILGUN_SERVER_NAME")

"""LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(tempfile.gettempdir(), 'minotour.log'),
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}"""

CELERY_IMPORTS = ('web.tasks')
# For RabbitMQ
#CELERY_BROKER_URL = 'amqp://'
CELERY_BROKER_URL = 'redis://127.0.0.1:6379/0'
#CELERY_RESULT_BACKEND = 'amqp://'
CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/0'
# Celery Data Format
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Europe/London'
CELERY_BEAT_SCHEDULE = {
    'rapid-monitor': {
        'task': 'web.tasks.run_monitor',
        'schedule': 15.0,
    },
    'slow-monitor': {
        'task': 'web.tasks.slow_monitor',
        'schedule': 30.0,
    },
    'send-messages': {
        'task': 'web.tasks.send_messages',
        'schedule': 30,
    },
    'delete-runs': {
        'task': 'web.tasks.delete_runs',
        'schedule': 60,
    },
}

# For sending twitter messages
TWITTOKEN = get_env_variable("MT_TWITTOKEN")
TWITTOKEN_SECRET=get_env_variable("MT_TWITTOKEN_SECRET")
TWITCONSUMER_KEY=get_env_variable("MT_TWITCONSUMER_KEY")
TWITCONSUMER_SECRET=get_env_variable("MT_TWITCONSUMER_SECRET")

# Variables for storing additonal files
# References
REFERENCELOCATION = get_env_variable("MT_REFERENCE_LOCATION")

PAGINATION_PAGE_SIZE = 100

MINIMAP2 = get_env_variable("MT_MINIMAP2")
BWA = get_env_variable("MT_BWA")

USE_X_FORWARDED_HOST = True
